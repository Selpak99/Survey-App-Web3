{
  "address": "0x884057E8020dc58c1AeAeCaF2cE4f8F6098E4C04",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "qId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "questions",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "answer1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "answer2",
          "type": "string"
        }
      ],
      "name": "QuestionAdded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PRIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "answers",
          "type": "uint256[]"
        }
      ],
      "name": "addAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "questionText",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "answer1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "answer2",
          "type": "string"
        }
      ],
      "name": "addQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getResponses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "answer1Count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "answer2Count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "responses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x98cb05b0b7bc88237e8d729830501a34d51ea9a01f312866d3179f3b90f68a4a",
  "receipt": {
    "to": null,
    "from": "0x31bbf34d63B33111B25F6F69e2Fec5Dcb15d981e",
    "contractAddress": "0x884057E8020dc58c1AeAeCaF2cE4f8F6098E4C04",
    "transactionIndex": 61,
    "gasUsed": "644906",
    "logsBloom": "0x
    "blockHash": "0x6265e56287e563eb9c6ec7a9efed791a63d994808a7ce4a08462018d076ddd52",
    "transactionHash": "0x98cb05b0b7bc88237e8d729830501a34d51ea9a01f312866d3179f3b90f68a4a",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 6633135,
        "transactionHash": "0x98cb05b0b7bc88237e8d729830501a34d51ea9a01f312866d3179f3b90f68a4a",
        "address": "0x884057E8020dc58c1AeAeCaF2cE4f8F6098E4C04",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031bbf34d63b33111b25f6f69e2fec5dcb15d981e"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x6265e56287e563eb9c6ec7a9efed791a63d994808a7ce4a08462018d076ddd52"
      }
    ],
    "blockNumber": 6633135,
    "cumulativeGasUsed": "10983368",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "71c3919adffa6cc1c1e1b99967e221de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"qId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"questions\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"answer1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"answer2\",\"type\":\"string\"}],\"name\":\"QuestionAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"answers\",\"type\":\"uint256[]\"}],\"name\":\"addAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"questionText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer2\",\"type\":\"string\"}],\"name\":\"addQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getResponses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"answer1Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answer2Count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"responses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/YourContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract YourContract is Ownable{\\n\\n\\tuint256 public PRIZE = 0.001 * 10**18;\\n\\n\\tuint256 private qId; //make private\\n\\n\\tconstructor() payable{}\\n\\t\\n\\n\\tmapping(uint256 => mapping(uint256 => uint256)) public responses;\\n\\n\\tmapping (address => bool) isAnswered;\\n\\n\\tmapping (address => bool) isBlackListed;\\n\\n\\tevent QuestionAdded(uint256 indexed qId,string questions,string answer1,string answer2);\\n\\t\\n\\n\\tfunction addQuestion(string memory questionText,string memory answer1,string memory answer2) public onlyOwner {\\n\\t\\t\\n\\t\\temit QuestionAdded(qId,questionText,answer1,answer2);\\n\\t\\tqId++;\\n\\t}\\n\\n\\tfunction addAnswer(uint256[] memory answers) public {\\n        require(answers.length == qId, \\\"Answers length mismatch\\\");\\n\\t\\trequire(isAnswered[msg.sender] == false,\\\"You have already send it!\\\");\\n\\t\\trequire(isBlackListed[msg.sender] == false,\\\"You are blacklisted\\\");\\n\\n\\t\\tif (answers[0] == 0) {\\n\\t\\t\\taddBlacklist(msg.sender);\\n\\t\\t\\trequire(isBlackListed[msg.sender] == false,\\\"You are blacklisted\\\");\\n\\t\\t}\\n\\n        for (uint256 i = 0; i < answers.length; i++) {\\n            uint256 answer = answers[i];\\n            require(answer == 0 || answer == 1, \\\"Invalid answer\\\");\\n\\n            responses[i][answer]++;\\n        }\\n\\t\\tisAnswered[msg.sender] = true;\\n\\n\\t\\tsendPrize(payable(msg.sender));\\n\\t\\t\\n    }\\n\\n\\tfunction getResponses(uint256 questionId) public view returns (uint256 answer1Count, uint256 answer2Count) {\\n        return (responses[questionId][0], responses[questionId][1]);\\n    }\\n\\n\\tfunction addBlacklist(address suspect) private {\\n\\t\\tisBlackListed[suspect] = true;\\n\\t}\\n\\n\\tfunction sendPrize(address payable _to) private {\\n        // Call returns a boolean value indicating success or failure.\\n        // This is the current recommended method to use.\\n        (bool sent,) = _to.call{value: PRIZE}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\t\\n\\n\\t\\n    \\n\\n    \\n\\n\\t\\n\\treceive() external payable {}\\n\\tfallback() external payable{}\\n}\\n\",\"keccak256\":\"0x895912ac254e0594e2c28347b2931aa24f28d860e26d7735dd0627ceb03fa965\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c680006001556100183361001d565b61006d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109da8061007c6000396000f3fe6080604052600436106100785760003560e01c80638da5cb5b1161004b5780638da5cb5b14610157578063c05390f61461017f578063c828109714610195578063f2fde38b146101b557005b806257efc2146100815780636619bfda146100cc578063715018a6146100ec57806371ee2ce11461010157005b3661007f57005b005b34801561008d57600080fd5b506100b961009c36600461068e565b600360209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156100d857600080fd5b5061007f6100e7366004610767565b6101d5565b3480156100f857600080fd5b5061007f610235565b34801561010d57600080fd5b5061014261011c3660046107ef565b600090815260036020908152604080832083805290915280822054600183529120549091565b604080519283526020830191909152016100c3565b34801561016357600080fd5b506000546040516001600160a01b0390911681526020016100c3565b34801561018b57600080fd5b506100b960015481565b3480156101a157600080fd5b5061007f6101b0366004610808565b610249565b3480156101c157600080fd5b5061007f6101d03660046108ae565b6104d1565b6101dd610547565b6002547fa7880bb8bf3fde23d6795c5621507673c405cef46a5a6bc67213141704cef66b84848460405161021393929190610924565b60405180910390a26002805490600061022b83610967565b9190505550505050565b61023d610547565b61024760006105a1565b565b6002548151146102a05760405162461bcd60e51b815260206004820152601760248201527f416e7377657273206c656e677468206d69736d6174636800000000000000000060448201526064015b60405180910390fd5b3360009081526004602052604090205460ff16156103005760405162461bcd60e51b815260206004820152601960248201527f596f75206861766520616c72656164792073656e6420697421000000000000006044820152606401610297565b3360009081526005602052604090205460ff16156103565760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c9948189b1858dadb1a5cdd1959606a1b6044820152606401610297565b806000815181106103695761036961098e565b60200260200101516000036103f6576103a0336001600160a01b03166000908152600560205260409020805460ff19166001179055565b3360009081526005602052604090205460ff16156103f65760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c9948189b1858dadb1a5cdd1959606a1b6044820152606401610297565b60005b81518110156104aa5760008282815181106104165761041661098e565b60200260200101519050806000148061042f5750806001145b61046c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b739bbb2b960911b6044820152606401610297565b6000828152600360209081526040808320848452909152812080549161049183610967565b91905055505080806104a290610967565b9150506103f9565b50336000818152600460205260409020805460ff191660011790556104ce906105f1565b50565b6104d9610547565b6001600160a01b03811661053e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610297565b6104ce816105a1565b6000546001600160a01b031633146102475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610297565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040516000916001600160a01b038416918381818185875af1925050503d806000811461063d576040519150601f19603f3d011682016040523d82523d6000602084013e610642565b606091505b505090508061068a5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610297565b5050565b600080604083850312156106a157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156106ef576106ef6106b0565b604052919050565b600082601f83011261070857600080fd5b813567ffffffffffffffff811115610722576107226106b0565b610735601f8201601f19166020016106c6565b81815284602083860101111561074a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561077c57600080fd5b833567ffffffffffffffff8082111561079457600080fd5b6107a0878388016106f7565b945060208601359150808211156107b657600080fd5b6107c2878388016106f7565b935060408601359150808211156107d857600080fd5b506107e5868287016106f7565b9150509250925092565b60006020828403121561080157600080fd5b5035919050565b6000602080838503121561081b57600080fd5b823567ffffffffffffffff8082111561083357600080fd5b818501915085601f83011261084757600080fd5b813581811115610859576108596106b0565b8060051b915061086a8483016106c6565b818152918301840191848101908884111561088457600080fd5b938501935b838510156108a257843582529385019390850190610889565b98975050505050505050565b6000602082840312156108c057600080fd5b81356001600160a01b03811681146108d757600080fd5b9392505050565b6000815180845260005b81811015610904576020818501810151868301820152016108e8565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600061093760608301866108de565b828103602084015261094981866108de565b9050828103604084015261095d81856108de565b9695505050505050565b60006001820161098757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205223351d3c5716ce68dcd15c6c2711dc2a143a188bfeb0ea339b9abe9df6b9a764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100785760003560e01c80638da5cb5b1161004b5780638da5cb5b14610157578063c05390f61461017f578063c828109714610195578063f2fde38b146101b557005b806257efc2146100815780636619bfda146100cc578063715018a6146100ec57806371ee2ce11461010157005b3661007f57005b005b34801561008d57600080fd5b506100b961009c36600461068e565b600360209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156100d857600080fd5b5061007f6100e7366004610767565b6101d5565b3480156100f857600080fd5b5061007f610235565b34801561010d57600080fd5b5061014261011c3660046107ef565b600090815260036020908152604080832083805290915280822054600183529120549091565b604080519283526020830191909152016100c3565b34801561016357600080fd5b506000546040516001600160a01b0390911681526020016100c3565b34801561018b57600080fd5b506100b960015481565b3480156101a157600080fd5b5061007f6101b0366004610808565b610249565b3480156101c157600080fd5b5061007f6101d03660046108ae565b6104d1565b6101dd610547565b6002547fa7880bb8bf3fde23d6795c5621507673c405cef46a5a6bc67213141704cef66b84848460405161021393929190610924565b60405180910390a26002805490600061022b83610967565b9190505550505050565b61023d610547565b61024760006105a1565b565b6002548151146102a05760405162461bcd60e51b815260206004820152601760248201527f416e7377657273206c656e677468206d69736d6174636800000000000000000060448201526064015b60405180910390fd5b3360009081526004602052604090205460ff16156103005760405162461bcd60e51b815260206004820152601960248201527f596f75206861766520616c72656164792073656e6420697421000000000000006044820152606401610297565b3360009081526005602052604090205460ff16156103565760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c9948189b1858dadb1a5cdd1959606a1b6044820152606401610297565b806000815181106103695761036961098e565b60200260200101516000036103f6576103a0336001600160a01b03166000908152600560205260409020805460ff19166001179055565b3360009081526005602052604090205460ff16156103f65760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c9948189b1858dadb1a5cdd1959606a1b6044820152606401610297565b60005b81518110156104aa5760008282815181106104165761041661098e565b60200260200101519050806000148061042f5750806001145b61046c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b739bbb2b960911b6044820152606401610297565b6000828152600360209081526040808320848452909152812080549161049183610967565b91905055505080806104a290610967565b9150506103f9565b50336000818152600460205260409020805460ff191660011790556104ce906105f1565b50565b6104d9610547565b6001600160a01b03811661053e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610297565b6104ce816105a1565b6000546001600160a01b031633146102475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610297565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040516000916001600160a01b038416918381818185875af1925050503d806000811461063d576040519150601f19603f3d011682016040523d82523d6000602084013e610642565b606091505b505090508061068a5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610297565b5050565b600080604083850312156106a157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156106ef576106ef6106b0565b604052919050565b600082601f83011261070857600080fd5b813567ffffffffffffffff811115610722576107226106b0565b610735601f8201601f19166020016106c6565b81815284602083860101111561074a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561077c57600080fd5b833567ffffffffffffffff8082111561079457600080fd5b6107a0878388016106f7565b945060208601359150808211156107b657600080fd5b6107c2878388016106f7565b935060408601359150808211156107d857600080fd5b506107e5868287016106f7565b9150509250925092565b60006020828403121561080157600080fd5b5035919050565b6000602080838503121561081b57600080fd5b823567ffffffffffffffff8082111561083357600080fd5b818501915085601f83011261084757600080fd5b813581811115610859576108596106b0565b8060051b915061086a8483016106c6565b818152918301840191848101908884111561088457600080fd5b938501935b838510156108a257843582529385019390850190610889565b98975050505050505050565b6000602082840312156108c057600080fd5b81356001600160a01b03811681146108d757600080fd5b9392505050565b6000815180845260005b81811015610904576020818501810151868301820152016108e8565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600061093760608301866108de565b828103602084015261094981866108de565b9050828103604084015261095d81856108de565b9695505050505050565b60006001820161098757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205223351d3c5716ce68dcd15c6c2711dc2a143a188bfeb0ea339b9abe9df6b9a764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 146,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "PRIZE",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 148,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "qId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 158,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "responses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 162,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "isAnswered",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 166,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "isBlackListed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}